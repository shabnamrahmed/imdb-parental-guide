{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","state","inputValue","titleOptions","parentalGuides","spoilerGuides","isTitlesLoading","isParentalGuidsLoading","Submit","setState","axios","post","titleName","then","res","data","GetParentalGuide","titleId","parentalGuide","map","section","isOpen","spoilersGuide","value","this","onChange","evt","target","onClick","item","id","src","imageURL","alt","title","sectionName","advisory","summary","voteCount","entries","entry","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"8TA8GeA,G,kNAzGbC,MAAQ,CACNC,WAAY,GACZC,aAAc,GACdC,eAAgB,GAChBC,cAAe,GACfC,iBAAiB,EACjBC,wBAAwB,G,EAG1BC,OAAS,WACP,EAAKC,SAAS,CAAEH,iBAAiB,IACjCI,IACGC,KAAK,+DAAgE,CACpEC,UAAW,EAAKX,MAAMC,aAEvBW,MAAK,SAACC,GAAD,OACJ,EAAKL,SAAS,CAAEN,aAAcW,EAAIC,KAAMT,iBAAiB,Q,EAI/DU,iBAAmB,SAACC,GAClB,EAAKR,SAAS,CAAEF,wBAAwB,IACxCG,IACGC,KAAK,kEAAmE,CACvEM,YAEDJ,MAAK,SAACC,GAAD,OACJ,EAAKL,SAAS,CACZL,eAAgBU,EAAIC,KAAKG,cAAcC,KAAI,SAACC,GAAD,mBAAC,eACvCA,GADsC,IAEzCC,QAAQ,OAEVhB,cAAeS,EAAIC,KAAKO,cACxBf,wBAAwB,Q,uDAKtB,IAAD,OACP,OACE,6BACE,2BACEgB,MAAOC,KAAKvB,MAAMC,WAClBuB,SAAU,SAACC,GAAD,OACR,EAAKjB,SAAS,CACZP,WAAYwB,EAAIC,OAAOJ,WAI7B,4BAAQK,QAASJ,KAAKhB,QAAtB,UAECgB,KAAKvB,MAAMK,gBACV,2CAEA,6BACGkB,KAAKvB,MAAME,aAAagB,KAAI,SAACU,GAAD,OAC3B,yBAAKD,QAAS,kBAAM,EAAKZ,iBAAiBa,EAAKC,MAC7C,yBAAKC,IAAKF,EAAKG,SAAUC,IAAI,KAC7B,6BAAMJ,EAAKK,YAMlBV,KAAKvB,MAAMM,uBACV,2CAEA,6BACE,6BACGiB,KAAKvB,MAAMG,eAAee,KAAI,SAACU,GAAD,OAC7B,6BACE,6BAAMA,EAAKM,aACX,6BAAMN,EAAKO,SAASC,SACpB,6BAAMR,EAAKO,SAASE,WACpB,6BACE,4BACGT,EAAKU,QAAQpB,KAAI,SAACqB,GAAD,OAChB,4BAAKA,aAOjB,6BACGhB,KAAKvB,MAAMI,cAAcc,KAAI,SAACU,GAAD,OAC5B,6BACE,6BAAMA,EAAKM,aACX,6BACE,4BACGN,EAAKU,QAAQpB,KAAI,SAACqB,GAAD,OAChB,4BAAKA,mB,GA5FXC,IAAMC,YCQJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB1C,MAAK,SAAA2C,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.2579e2a8.chunk.js","sourcesContent":["import React from \"react\";\nimport axios from \"axios\";\nimport \"./App.css\";\n\nclass App extends React.Component {\n  state = {\n    inputValue: \"\",\n    titleOptions: [],\n    parentalGuides: [],\n    spoilerGuides: [],\n    isTitlesLoading: false,\n    isParentalGuidsLoading: false,\n  };\n\n  Submit = () => {\n    this.setState({ isTitlesLoading: true });\n    axios\n      .post(\"https://imdb-parental-advisory.xsaudahmed.repl.co/findTitles\", {\n        titleName: this.state.inputValue,\n      })\n      .then((res) =>\n        this.setState({ titleOptions: res.data, isTitlesLoading: false })\n      );\n  };\n\n  GetParentalGuide = (titleId) => {\n    this.setState({ isParentalGuidsLoading: true });\n    axios\n      .post(\"https://imdb-parental-advisory.xsaudahmed.repl.co/parentalGuide\", {\n        titleId,\n      })\n      .then((res) =>\n        this.setState({\n          parentalGuides: res.data.parentalGuide.map((section) => ({\n            ...section,\n            isOpen: false,\n          })),\n          spoilerGuides: res.data.spoilersGuide,\n          isParentalGuidsLoading: false,\n        })\n      );\n  };\n\n  render() {\n    return (\n      <div>\n        <input\n          value={this.state.inputValue}\n          onChange={(evt) =>\n            this.setState({\n              inputValue: evt.target.value,\n            })\n          }\n        ></input>\n        <button onClick={this.Submit}>Submit</button>\n\n        {this.state.isTitlesLoading ? (\n          <div>Loading...</div>\n        ) : (\n          <div>\n            {this.state.titleOptions.map((item) => (\n              <div onClick={() => this.GetParentalGuide(item.id)}>\n                <img src={item.imageURL} alt=\"\" />\n                <div>{item.title}</div>\n              </div>\n            ))}\n          </div>\n        )}\n\n        {this.state.isParentalGuidsLoading ? (\n          <div>Loading...</div>\n        ) : (\n          <div>\n            <div>\n              {this.state.parentalGuides.map((item) => (\n                <div>\n                  <div>{item.sectionName}</div>\n                  <div>{item.advisory.summary}</div>\n                  <div>{item.advisory.voteCount}</div>\n                  <div>\n                    <ul>\n                      {item.entries.map((entry) => (\n                        <li>{entry}</li>\n                      ))}\n                    </ul>\n                  </div>\n                </div>\n              ))}\n            </div>\n            <div>\n              {this.state.spoilerGuides.map((item) => (\n                <div>\n                  <div>{item.sectionName}</div>\n                  <div>\n                    <ul>\n                      {item.entries.map((entry) => (\n                        <li>{entry}</li>\n                      ))}\n                    </ul>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}