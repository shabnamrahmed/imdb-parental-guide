{"version":3,"sources":["AdvisorySection.js","LoadingSpinner.js","App.js","serviceWorker.js","index.js"],"names":["AdvisorySection","this","props","parentalGuides","length","className","selectedTitle","onClick","ToggleAllExpansion","map","item","ToggleSectionExpansion","id","sectionName","isCollapsed","advisory","summary","voteCount","entries","entry","spoilerGuides","React","Component","LoadingSpinner","class","AddIdToSection","section","App","state","inputValue","titleOptions","isLoading","Submit","setState","axios","post","titleName","then","res","data","GetParentalGuide","titleId","titleSelection","parentalGuide","spoilersGuide","CloseParentalGuide","newParentalGuides","newSpoilerGuides","isAnyParentalGuideOpen","some","isAnySpoilerGuideOpen","isParentalGuide","newGuides","cloneDeep","searchBarRef","createRef","ref","value","onChange","evt","target","onKeyUp","e","key","current","blur","title","src","imageURL","alt","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.15b81c96.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./AdvisorySection.css\";\r\n\r\nclass AdvisorySection extends React.Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        {!!this.props.parentalGuides.length && (\r\n          <div className=\"guides-heading\">\r\n            Parental Guide for:{\" \"}\r\n            <div className=\"selected-title\">{this.props.selectedTitle}</div>\r\n          </div>\r\n        )}\r\n        <div\r\n          className={this.props.parentalGuides.length ? \"guides-container\" : \"\"}\r\n        >\r\n          {!!this.props.parentalGuides.length && (\r\n            <div\r\n              className=\"expand-collapse\"\r\n              onClick={this.props.ToggleAllExpansion}\r\n            >\r\n              Expand/Collapse All\r\n            </div>\r\n          )}\r\n\r\n          <div>\r\n            {!!this.props.parentalGuides.length && (\r\n              <div className=\"section-heading\">Content Advisory:</div>\r\n            )}\r\n\r\n            {this.props.parentalGuides.map((item) => (\r\n              <div>\r\n                <div\r\n                  className=\"section-title-text\"\r\n                  onClick={() =>\r\n                    this.props.ToggleSectionExpansion(item.id, true)\r\n                  }\r\n                >\r\n                  {item.sectionName}\r\n                </div>\r\n                <div\r\n                  className={\r\n                    item.isCollapsed ? \"collapsed-entry\" : \"expanded-entry\"\r\n                  }\r\n                >\r\n                  <div className=\"guide-summary-text\">\r\n                    {item.advisory.summary}\r\n                  </div>\r\n                  <div className=\"guide-vote-count-text\">\r\n                    {item.advisory.voteCount}\r\n                  </div>\r\n                  <div>\r\n                    <ul className=\"entries-list\">\r\n                      {item.entries.map((entry) => (\r\n                        <li className=\"guide-entry-text\">{entry}</li>\r\n                      ))}\r\n                    </ul>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            ))}\r\n          </div>\r\n          <div>\r\n            {!!this.props.spoilerGuides.length && (\r\n              <div className=\"section-heading\">Spoilers:</div>\r\n            )}\r\n\r\n            {this.props.spoilerGuides.map((item) => (\r\n              <div>\r\n                <div\r\n                  className=\"section-title-text\"\r\n                  onClick={() => this.props.ToggleSectionExpansion(item.id)}\r\n                >\r\n                  {item.sectionName}\r\n                </div>\r\n                <div\r\n                  className={\r\n                    item.isCollapsed ? \"collapsed-entry\" : \"expanded-entry\"\r\n                  }\r\n                >\r\n                  <ul className=\"entries-list\">\r\n                    {item.entries.map((entry) => (\r\n                      <li className=\"guide-entry-text\">{entry}</li>\r\n                    ))}\r\n                  </ul>\r\n                </div>\r\n              </div>\r\n            ))}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default AdvisorySection;\r\n","import React from \"react\";\r\nimport \"./LoadingSpinner.css\";\r\n\r\nclass LoadingSpinner extends React.Component {\r\n  render() {\r\n    return (\r\n      <div class=\"sk-circle\">\r\n        <div class=\"sk-circle1 sk-child\"></div>\r\n        <div class=\"sk-circle2 sk-child\"></div>\r\n        <div class=\"sk-circle3 sk-child\"></div>\r\n        <div class=\"sk-circle4 sk-child\"></div>\r\n        <div class=\"sk-circle5 sk-child\"></div>\r\n        <div class=\"sk-circle6 sk-child\"></div>\r\n        <div class=\"sk-circle7 sk-child\"></div>\r\n        <div class=\"sk-circle8 sk-child\"></div>\r\n        <div class=\"sk-circle9 sk-child\"></div>\r\n        <div class=\"sk-circle10 sk-child\"></div>\r\n        <div class=\"sk-circle11 sk-child\"></div>\r\n        <div class=\"sk-circle12 sk-child\"></div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default LoadingSpinner;\r\n","import React from \"react\";\r\nimport axios from \"axios\";\r\nimport { cloneDeep } from \"lodash\";\r\nimport \"./App.css\";\r\nimport AdvisorySection from \"./AdvisorySection\";\r\nimport LoadingSpinner from \"./LoadingSpinner\";\r\n\r\nconst AddIdToSection = (section, id) => ({\r\n  ...section,\r\n  isCollapsed: true,\r\n  id,\r\n});\r\nclass App extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.searchBarRef = React.createRef();\r\n  }\r\n\r\n  state = {\r\n    inputValue: \"\",\r\n    titleOptions: [],\r\n    parentalGuides: [],\r\n    spoilerGuides: [],\r\n    isLoading: false,\r\n    selectedTitle: \"\",\r\n  };\r\n\r\n  Submit = () => {\r\n    if (this.state.inputValue.length) {\r\n      this.setState({\r\n        isLoading: true,\r\n        parentalGuides: [],\r\n        spoilerGuides: [],\r\n      });\r\n      axios\r\n        .post(\"https://imdb-parental-advisory.xsaudahmed.repl.co/findTitles\", {\r\n          titleName: this.state.inputValue,\r\n        })\r\n        .then((res) =>\r\n          this.setState({ titleOptions: res.data, isLoading: false })\r\n        );\r\n    }\r\n  };\r\n\r\n  GetParentalGuide = (titleId, titleSelection) => {\r\n    this.setState({\r\n      isLoading: true,\r\n      selectedTitle: titleSelection,\r\n    });\r\n    axios\r\n      .post(\"https://imdb-parental-advisory.xsaudahmed.repl.co/parentalGuide\", {\r\n        titleId,\r\n      })\r\n      .then((res) =>\r\n        this.setState({\r\n          parentalGuides: res.data.parentalGuide.map(AddIdToSection),\r\n          spoilerGuides: res.data.spoilersGuide.map(AddIdToSection),\r\n          isLoading: false,\r\n        })\r\n      );\r\n  };\r\n\r\n  CloseParentalGuide = () => {\r\n    this.setState({\r\n      parentalGuides: [],\r\n      spoilerGuides: [],\r\n      selectedTitle: \"\",\r\n    });\r\n  };\r\n\r\n  ToggleAllExpansion = () => {\r\n    let newParentalGuides, newSpoilerGuides;\r\n\r\n    // check if any list is not isCollapsed\r\n    const isAnyParentalGuideOpen = this.state.parentalGuides.some(\r\n      (section) => !section.isCollapsed\r\n    );\r\n\r\n    const isAnySpoilerGuideOpen = this.state.spoilerGuides.some(\r\n      (section) => !section.isCollapsed\r\n    );\r\n\r\n    const isAnySectionOpen = isAnyParentalGuideOpen || isAnySpoilerGuideOpen;\r\n\r\n    //if something is expanded close everything\r\n    if (isAnySectionOpen) {\r\n      newParentalGuides = this.state.parentalGuides.map((section) => ({\r\n        ...section,\r\n        isCollapsed: true,\r\n      }));\r\n\r\n      newSpoilerGuides = this.state.spoilerGuides.map((section) => ({\r\n        ...section,\r\n        isCollapsed: true,\r\n      }));\r\n    }\r\n    //else collapse everything\r\n    else {\r\n      newParentalGuides = this.state.parentalGuides.map((section) => ({\r\n        ...section,\r\n        isCollapsed: false,\r\n      }));\r\n\r\n      newSpoilerGuides = this.state.spoilerGuides.map((section) => ({\r\n        ...section,\r\n        isCollapsed: false,\r\n      }));\r\n    }\r\n    this.setState({\r\n      parentalGuides: newParentalGuides,\r\n      spoilerGuides: newSpoilerGuides,\r\n    });\r\n  };\r\n\r\n  ToggleSectionExpansion = (id, isParentalGuide = false) => {\r\n    const newGuides = cloneDeep(\r\n      isParentalGuide ? this.state.parentalGuides : this.state.spoilerGuides\r\n    );\r\n\r\n    newGuides[id].isCollapsed = !newGuides[id].isCollapsed;\r\n\r\n    if (isParentalGuide) {\r\n      this.setState({ parentalGuides: newGuides });\r\n    } else {\r\n      this.setState({ spoilerGuides: newGuides });\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"main-container\">\r\n        <div className=\"search\">\r\n          {!!this.state.parentalGuides.length && (\r\n            <button className=\"back-button\" onClick={this.CloseParentalGuide}>\r\n              Back\r\n            </button>\r\n          )}\r\n          <input\r\n            className=\"search-bar\"\r\n            ref={this.searchBarRef}\r\n            value={this.state.inputValue}\r\n            onChange={(evt) =>\r\n              this.setState({\r\n                inputValue: evt.target.value,\r\n              })\r\n            }\r\n            onKeyUp={(e) => {\r\n              if (e.key === \"Enter\") {\r\n                this.Submit();\r\n                this.searchBarRef.current.blur();\r\n              }\r\n            }}\r\n          ></input>\r\n          <button className=\"search-button\" onClick={this.Submit}>\r\n            Search\r\n          </button>\r\n        </div>\r\n        {this.state.isLoading && <div>{<LoadingSpinner />}</div>}\r\n\r\n        {!!this.state.titleOptions.length &&\r\n          !this.state.parentalGuides.length &&\r\n          !this.state.isLoading && (\r\n            <div class=\"title-options\">\r\n              {this.state.titleOptions.map((item) => (\r\n                <div\r\n                  class=\"option\"\r\n                  onClick={() => this.GetParentalGuide(item.id, item.title)}\r\n                >\r\n                  <img class=\"media-image\" src={item.imageURL} alt=\"\" />\r\n                  <div class=\"text\">{item.title}</div>\r\n                </div>\r\n              ))}\r\n            </div>\r\n          )}\r\n\r\n        <AdvisorySection\r\n          parentalGuides={this.state.parentalGuides}\r\n          spoilerGuides={this.state.spoilerGuides}\r\n          selectedTitle={this.state.selectedTitle}\r\n          ToggleSectionExpansion={this.ToggleSectionExpansion}\r\n          ToggleAllExpansion={this.ToggleAllExpansion}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}