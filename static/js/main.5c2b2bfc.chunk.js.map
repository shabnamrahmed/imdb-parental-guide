{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","state","inputValue","titleOptions","parentalGuides","spoilerGuides","isLoading","selectedTitle","isOpen","Submit","setState","axios","post","titleName","then","res","data","GetParentalGuide","titleId","titleSelection","parentalGuide","map","section","spoilersGuide","CloseParentalGuide","ExpandCollapseAll","class","this","length","onClick","value","onChange","evt","target","onKeyUp","e","key","item","id","title","src","imageURL","alt","sectionName","advisory","summary","voteCount","entries","entry","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.5c2b2bfc.chunk.js","sourcesContent":["import React from \"react\";\r\nimport axios from \"axios\";\r\nimport \"./App.css\";\r\n\r\nclass App extends React.Component {\r\n  state = {\r\n    inputValue: \"\",\r\n    titleOptions: [],\r\n    parentalGuides: [],\r\n    spoilerGuides: [],\r\n    isLoading: false,\r\n    selectedTitle: \"\",\r\n    isOpen: false,\r\n  };\r\n\r\n  Submit = () => {\r\n    this.setState({\r\n      isLoading: true,\r\n      parentalGuides: [],\r\n      spoilerGuides: [],\r\n    });\r\n    axios\r\n      .post(\"https://imdb-parental-advisory.xsaudahmed.repl.co/findTitles\", {\r\n        titleName: this.state.inputValue,\r\n      })\r\n      .then((res) =>\r\n        this.setState({ titleOptions: res.data, isLoading: false })\r\n      );\r\n  };\r\n\r\n  GetParentalGuide = (titleId, titleSelection) => {\r\n    this.setState({\r\n      isLoading: true,\r\n      selectedTitle: titleSelection,\r\n    });\r\n    axios\r\n      .post(\"https://imdb-parental-advisory.xsaudahmed.repl.co/parentalGuide\", {\r\n        titleId,\r\n      })\r\n      .then((res) =>\r\n        this.setState({\r\n          parentalGuides: res.data.parentalGuide.map((section) => ({\r\n            ...section,\r\n            isOpen: false,\r\n          })),\r\n          spoilerGuides: res.data.spoilersGuide,\r\n          isLoading: false,\r\n        })\r\n      );\r\n  };\r\n\r\n  CloseParentalGuide = () => {\r\n    this.setState({\r\n      parentalGuides: [],\r\n      spoilerGuides: [],\r\n      selectedTitle: \"\",\r\n    });\r\n  };\r\n\r\n  ExpandCollapseAll = () => {\r\n    this.setState({ isOpen: !this.state.isOpen });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div class=\"main-container\">\r\n        <div class=\"search\">\r\n          {!!this.state.parentalGuides.length && (\r\n            <button class=\"back-button\" onClick={this.CloseParentalGuide}>\r\n              Back\r\n            </button>\r\n          )}\r\n          <input\r\n            class=\"search-bar\"\r\n            value={this.state.inputValue}\r\n            onChange={(evt) =>\r\n              this.setState({\r\n                inputValue: evt.target.value,\r\n              })\r\n            }\r\n            onKeyUp={(e) => {\r\n              if (e.key === \"Enter\") {\r\n                this.Submit();\r\n              }\r\n            }}\r\n          ></input>\r\n          <button class=\"search-button\" onClick={this.Submit}>\r\n            Search\r\n          </button>\r\n        </div>\r\n        {this.state.isLoading && <div class=\"loading\">Loading...</div>}\r\n        {!!this.state.titleOptions.length &&\r\n          !this.state.parentalGuides.length &&\r\n          !this.state.isLoading && (\r\n            <div class=\"title-options\">\r\n              {this.state.titleOptions.map((item) => (\r\n                <div\r\n                  class=\"option\"\r\n                  onClick={() => this.GetParentalGuide(item.id, item.title)}\r\n                >\r\n                  <img class=\"media-image\" src={item.imageURL} alt=\"\" />\r\n                  <div class=\"text\">{item.title}</div>\r\n                </div>\r\n              ))}\r\n            </div>\r\n          )}\r\n\r\n        {!!this.state.parentalGuides.length && (\r\n          <div class=\"guides-heading\">\r\n            Parental Guide for:{\" \"}\r\n            <div class=\"selected-title\">{this.state.selectedTitle}</div>\r\n          </div>\r\n        )}\r\n\r\n        <div class={this.state.parentalGuides.length ? \"guides-container\" : \"\"}>\r\n          {!!this.state.parentalGuides.length && (\r\n            <div class=\"expand-collapse\" onClick={this.ExpandCollapseAll}>\r\n              Expand/Collapse All\r\n            </div>\r\n          )}\r\n\r\n          <div>\r\n            {!!this.state.parentalGuides.length && (\r\n              <div class=\"section-heading\">Content Advisory:</div>\r\n            )}\r\n\r\n            {this.state.parentalGuides.map((item) => (\r\n              <div>\r\n                <div class=\"section-title-text\">{item.sectionName}</div>\r\n                <div\r\n                  class={\r\n                    this.state.isOpen ? \"expanded-entry\" : \"collapsed-entry\"\r\n                  }\r\n                >\r\n                  <div class=\"guide-summary-text\">{item.advisory.summary}</div>\r\n                  <div class=\"guide-vote-count-text\">\r\n                    {item.advisory.voteCount}\r\n                  </div>\r\n                  <div>\r\n                    <ul class=\"entries-list\">\r\n                      {item.entries.map((entry) => (\r\n                        <li class=\"guide-entry-text\">{entry}</li>\r\n                      ))}\r\n                    </ul>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            ))}\r\n          </div>\r\n          <div>\r\n            {!!this.state.spoilerGuides.length && (\r\n              <div class=\"section-heading\">Spoilers:</div>\r\n            )}\r\n\r\n            {this.state.spoilerGuides.map((item) => (\r\n              <div>\r\n                <div class=\"section-title-text\">{item.sectionName}</div>\r\n                <div\r\n                  class={\r\n                    this.state.isOpen ? \"expanded-entry\" : \"collapsed-entry\"\r\n                  }\r\n                >\r\n                  <ul class=\"entries-list\">\r\n                    {item.entries.map((entry) => (\r\n                      <li class=\"guide-entry-text\">{entry}</li>\r\n                    ))}\r\n                  </ul>\r\n                </div>\r\n              </div>\r\n            ))}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}